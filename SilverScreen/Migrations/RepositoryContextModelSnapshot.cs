// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Context;

#nullable disable

namespace SilverScreen.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("411d4b6d-809c-49bb-9c90-b8e260a157fd"),
                            Name = "فیلم"
                        },
                        new
                        {
                            Id = new Guid("4828403c-29e7-4d23-8ad1-7ccb79e68204"),
                            Name = "سریال"
                        });
                });

            modelBuilder.Entity("Entities.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf137eb8-0c91-4b19-a8d9-f59243bac658"),
                            Name = "درام"
                        },
                        new
                        {
                            Id = new Guid("2cf6e944-8110-43c1-913e-214800a10487"),
                            Name = "کمدی"
                        },
                        new
                        {
                            Id = new Guid("0c3515b2-3c40-46e8-9810-04396e67c43f"),
                            Name = "هیجان اگیز"
                        },
                        new
                        {
                            Id = new Guid("9505f5a7-2893-4824-b4b9-ee33f2c7638e"),
                            Name = "عاشقانه"
                        },
                        new
                        {
                            Id = new Guid("52882a06-5633-4e08-b444-93e4150592af"),
                            Name = "اکشن"
                        },
                        new
                        {
                            Id = new Guid("c5b87fa1-4f70-4a0c-86d1-248e26cdf058"),
                            Name = "مستند"
                        },
                        new
                        {
                            Id = new Guid("7e34286b-58b9-4154-b606-1ab241553f98"),
                            Name = "جنایی"
                        },
                        new
                        {
                            Id = new Guid("7199a4f8-a70c-40a5-bf5b-a496fc5b2e28"),
                            Name = "ترسناک"
                        },
                        new
                        {
                            Id = new Guid("0ea5f132-6780-42a2-b1d7-1bf4e92447ed"),
                            Name = "ماجراجویی"
                        },
                        new
                        {
                            Id = new Guid("01834ddc-2c97-4b04-b5af-762a2d27ddf1"),
                            Name = "معمایی"
                        },
                        new
                        {
                            Id = new Guid("3ea7c117-f140-4aa4-831d-b84deb9d15e1"),
                            Name = "خانوادگی"
                        },
                        new
                        {
                            Id = new Guid("9fb3d00e-c6ef-4b8c-a6d9-32d16b38c518"),
                            Name = "فانتزی"
                        },
                        new
                        {
                            Id = new Guid("64babf59-cbc0-4c56-b6b6-0cf18dcca2e7"),
                            Name = "علمی تخیلی"
                        },
                        new
                        {
                            Id = new Guid("7ddfbf82-517c-4883-9720-bfeb294147b6"),
                            Name = "انیمیشن"
                        },
                        new
                        {
                            Id = new Guid("a483868a-980d-4e7b-bfed-7d95ef159eb5"),
                            Name = "تاریخی"
                        },
                        new
                        {
                            Id = new Guid("14945b09-6df9-4965-a461-91e63620d700"),
                            Name = "زندگی نامه"
                        },
                        new
                        {
                            Id = new Guid("5a849d49-a444-4738-b857-5a7c70098246"),
                            Name = "جنگی"
                        },
                        new
                        {
                            Id = new Guid("5f4660bd-f50b-474a-8869-c4952f1366c7"),
                            Name = "موزیکال"
                        },
                        new
                        {
                            Id = new Guid("698904c4-8e2c-493e-a526-e7d562532a18"),
                            Name = "ورزشی"
                        },
                        new
                        {
                            Id = new Guid("8d35702a-db58-49a8-9c52-e4353e490e89"),
                            Name = "وسترن"
                        },
                        new
                        {
                            Id = new Guid("da6dc3df-b04f-42ef-b8ac-94a4a79eb5dc"),
                            Name = "رئالیتی شو"
                        });
                });

            modelBuilder.Entity("Entities.Languages.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("be2e2aa5-4599-4a55-9d1f-471b17d7561d"),
                            Image = "",
                            Name = "آلمانی"
                        },
                        new
                        {
                            Id = new Guid("5d189687-de58-41a6-980b-18ec0e542ba0"),
                            Image = "",
                            Name = "انگلیسی"
                        });
                });

            modelBuilder.Entity("Entities.Movies.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BannerImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PulicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TimeDuration")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Entities.Movies.MovieFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("Chapter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieLanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Season")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("MovieLanguageId");

                    b.ToTable("MovieFiles");
                });

            modelBuilder.Entity("Entities.Movies.MovieGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("Entities.Movies.MovieLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieLanguages");
                });

            modelBuilder.Entity("Entities.Movies.Movie", b =>
                {
                    b.HasOne("Entities.Categories.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Movies.MovieFile", b =>
                {
                    b.HasOne("Entities.Movies.Movie", null)
                        .WithMany("MovieFiles")
                        .HasForeignKey("MovieId");

                    b.HasOne("Entities.Movies.MovieLanguage", "MovieLanguage")
                        .WithMany()
                        .HasForeignKey("MovieLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieLanguage");
                });

            modelBuilder.Entity("Entities.Movies.MovieGenre", b =>
                {
                    b.HasOne("Entities.Genres.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Movies.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Entities.Movies.MovieLanguage", b =>
                {
                    b.HasOne("Entities.Languages.Language", "Language")
                        .WithMany("MovieLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Movies.Movie", "Movie")
                        .WithMany("MoiveLanguages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Entities.Categories.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Entities.Genres.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Entities.Languages.Language", b =>
                {
                    b.Navigation("MovieLanguages");
                });

            modelBuilder.Entity("Entities.Movies.Movie", b =>
                {
                    b.Navigation("MoiveLanguages");

                    b.Navigation("MovieFiles");

                    b.Navigation("MovieGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
